""" Collision Checker takes the lattice graphs generated by Lattice Generator and modifies it 
based on the predicted subject path from Subject Predictor and the CARLA road environment. """
from carla import *
import numpy as np
import math


class CollisionChecker:
    def __init__(self, lane_range, time=1):

        # self.lattice_graph = None
        self.subject_path = None
        self.same_lane_range = lane_range
        self.time_buffer = time

    def predict_collision(
        self, ego_size, subject_size, ego_state, subject_path, lane_change
    ):
        collide = False

        for sub_state in subject_path:
            if lane_change:
                collide = self.check_collision_radii(
                    ego_size, subject_size, ego_state, sub_state
                )
            else:
                collide = self.check_collision_x(
                    ego_size, subject_size, ego_state, sub_state
                )

            if collide:
                break

        return collide

    def check_collision_x(self, ego_size, sub_size, ego_state, sub_state):
        if abs(ego_state.time - sub_state.time) > self.time_buffer:
            return False

        horizontal_dist = abs(ego_state.position[1] - sub_state.position[1])

        if horizontal_dist > self.same_lane_range:
            return False
        else:
            return (
                abs(ego_state.position[0] - sub_state.position[0])
                <= ego_size[0] + sub_size[0]
            )

    def check_collision_radii(self, ego_size, sub_size, ego_state, sub_state):
        if abs(ego_state.time - sub_state.time) > self.time_buffer:
            return False

        ego_rad = np.max([2 * ego_size[0] / 3, 2 * ego_size[1] / 3])
        sub_rad = np.max([2 * sub_size[0] / 3, 2 * sub_size[1] / 3])
        center_dist = math.sqrt(
            pow(ego_state.position[0] - sub_state.position[0], 2)
            + pow(ego_state.position[1] - sub_state.position[1], 2)
        )
        return center_dist <= ego_rad + sub_rad

    def update_subject_path(self, subject_path):
        self.subject_path = subject_path

    def assign_cost(self):
        pass
